#version 400

in vec2 UV;
in vec3 fragPos;
in vec3 fragColor;
in vec3 normal;

out vec4 outputColor;

uniform vec3 viewPos;
uniform sampler2D texture_diffuse;

vec3	computeLight() {
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec3 lightPos = vec3(5, 5 ,1);

	vec3 ambient = lightColor * 0.2;

	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - fragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor * 0.3;

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = lightColor * (spec * 0.5);  

	vec3 result = ambient + diffuse + specular;
	// vec3 result = ambient + diffuse;

	return result;
}

void main(){
	vec3 truc = fragColor;

	vec3 light = computeLight();

    outputColor = vec4(light, 1.0) * texture(texture_diffuse, UV);
}