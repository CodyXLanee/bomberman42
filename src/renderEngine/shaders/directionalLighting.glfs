#version 400

in vec2 UV;
in vec3 fragPos;
in vec3 normal;
in mat3 TBN;
in vec4 fragPosLightSpace;

out vec4 outputColor;

uniform vec3 viewPos;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 lightingValues; // ambiant, diffuse, specular

uniform vec3 fireLightPos[100];
uniform int fireLightNbr;
uniform float fireShininess;

uniform sampler2D texture_diffuse;
uniform sampler2D texture_specular;
uniform sampler2D texture_normal;
uniform sampler2D depthMap;

uniform vec3 materialAmbient;
uniform vec3 materialDiffuse;
uniform vec3 materialSpecular;

uniform float alpha;
uniform int hasBumpMap;
uniform int hasSpecularMap;

float	computeShadow(vec4 fragPosLightSpace, vec3 lightDir) {
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(depthMap, projCoords.xy).r;
	float currentDepth = projCoords.z;

	vec3 norm = normalize(normal);
	float bias = max(0.001 * (1.0 - dot(norm, lightDir)), 0.0005);

    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(depthMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;

	return shadow;
}

vec3 computeFireLight(vec3 firePos, vec3 viewDir)
{
    vec3 lightDir = normalize(firePos - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    // attenuation
    float distance    = length(firePos - fragPos);
    float attenuation = 1.0 / (1.0 + 0.35 * distance + 
  			     0.44 * (distance * distance));    
    // combine results
    vec3 ambient = vec3(0.988, 0.901, 0.411) * 0.02;
    float diffuse  = 0.5 * diff;
    float specular = 0.3 * spec;

    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;

    return ambient + diffuse + specular;
}

vec3	computeLight() {

    vec3 lightAmbient = vec3(lightingValues.x);
    vec3 lightDiffuse = vec3(lightingValues.y);
    vec3 lightSpecular = vec3(lightingValues.z);

    //ambient
	vec3 ambient = lightColor * lightAmbient * materialAmbient;

    vec3 norm;
    if(hasBumpMap == 1) {
        norm = texture(texture_normal, UV).rgb;
        norm = normalize(norm * 2.0 - 1.0);
        norm = normalize(TBN * norm);
    } else
        norm = normalize(normal);
        
	vec3 lightDir = normalize(lightPos);
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = lightDiffuse * diff * materialDiffuse * texture(texture_diffuse, UV).rgb;

    // vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0);
    vec3 specular;
    if (hasSpecularMap == 1)
        specular = spec * lightSpecular * materialSpecular * texture(texture_specular, UV).rgb;
    else
        specular = spec * lightSpecular * materialSpecular;

    vec3 fire;
    if (fireLightNbr != 0) {
        for (int i = 0; i < fireLightNbr; i++) {
            fire += computeFireLight(fireLightPos[i], viewDir);
        }
        fire /= fireLightNbr;
    }

    float shadow = computeShadow(fragPosLightSpace, lightDir);       
    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular)) * lightColor;
    
	return result + fire * (2 + fireShininess);
}

void main(){
	vec3 light = computeLight();

    outputColor = vec4(light, alpha) * texture(texture_diffuse, UV);
}