#version 400

in vec2 UV;
in vec3 fragPos;
in vec3 fragColor;
in vec3 normal;
in vec4 fragPosLightSpace;

out vec4 outputColor;

uniform vec3 viewPos;
uniform vec3 lightPos;
uniform vec3 lightColor;

uniform sampler2D texture_diffuse;
uniform samplerCube depthMap;
uniform float far_plane;

vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float   computeShadow() {
    vec3 fragToLight = fragPos - lightPos; 
    float currentDepth = length(fragToLight);

    float shadow = 0.0;
    float bias = 0.05; 
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;

    for (int i = 0; i < samples; i++) {
        float closestDepth = texture(depthMap, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= far_plane;
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);

    return shadow;
}

vec3	computeLight() {
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec3 lightPos = vec3(20.0, 20.0, 20.0);

	vec3 ambient = lightColor * 0.2;

	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - fragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	float diffuse = diff * 0.6;

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    float specular = spec * 0.3;

	// vec3 result = ambient + diffuse + specular;
	// vec3 result = ambient + diffuse;

    // float shadow = computeShadow(fragPosLightSpace, lightDir); 
    float shadow = computeShadow(); 
    // float shadow = 1.0; 
    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular)) * lightColor;

	return result;
}

void main(){
	// vec3 truc = fragColor;

	vec3 light = computeLight();

    outputColor = vec4(light, 1.0) * texture(texture_diffuse, UV);
    // outputColor = vec4(light, 1.0);
}