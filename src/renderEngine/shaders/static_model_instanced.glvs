#version 400

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normalIn;
layout(location = 2) in vec2 textCoords;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;
layout(location = 5) in mat4 modelsMatrix;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 lightSpaceMatrix;

uniform vec3 materialColor;

out vec3 fragColor;
out vec3 fragPos;
out vec3 normal;
out vec2 UV;
out mat3 TBN;
out vec4 fragPosLightSpace;


void main()
{
    fragPos = vec3(modelsMatrix * vec4(position, 1.0));
    fragColor = materialColor;
    normal = mat3(viewMatrix * modelsMatrix) * normalIn;
    UV = textCoords;
    vec3 T = normalize(vec3(modelsMatrix * vec4(tangent,   0.0)));
    vec3 B = normalize(vec3(modelsMatrix * vec4(bitangent, 0.0)));
    vec3 N = normalize(vec3(modelsMatrix * vec4(normal,    0.0)));
    TBN = mat3(T, B, N);
    fragPosLightSpace = lightSpaceMatrix * vec4(fragPos, 1.0);
    gl_Position = (projectionMatrix * viewMatrix * modelsMatrix) * vec4(position, 1.0);
}
