#version 400

in vec2 UV;
in vec3 fragPos;
in vec3 fragColor;
in vec3 normal;
in vec4 fragPosLightSpace;

out vec4 outputColor;

uniform vec3 viewPos;
uniform sampler2D texture_diffuse;
uniform sampler2D depthMap;

float	computeShadow(vec4 fragPosLightSpace, vec3 lightDir) {
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(depthMap, projCoords.xy).r;
	float currentDepth = projCoords.z;

	vec3 norm = normalize(normal);
	float bias = max(0.05 * (1.0 - dot(norm, lightDir)), 0.005);

	float shadow = currentDepth - bias> closestDepth  ? 1.0 : 0.0;
	return shadow;
}

vec3	computeLight() {
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec3 lightPos = vec3(20.0, 20.0, 20.0);

	vec3 ambient = lightColor * 0.8;

	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - fragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	float diffuse = diff * 0.6;

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    float specular = spec * 0.3;

	// vec3 result = ambient + diffuse + specular;
	// vec3 result = ambient + diffuse;

    float shadow = computeShadow(fragPosLightSpace, lightDir);       
    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular)) * lightColor;

	return result;
}

void main(){
	vec3 truc = fragColor;

	vec3 light = computeLight();

    outputColor = vec4(light, 1.0) * texture(texture_diffuse, UV);
    // outputColor = vec4(light, 1.0);
}